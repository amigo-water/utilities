services:
  postgres:
    image: postgres:17
    container_name: postgres
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: root
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    restart: always
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log
    ports:
      - "2181:2181"
    networks:
      - app-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    restart: always
    depends_on:
      - zookeeper
    environment:
      KAFKA_HEAP_OPTS: "-Xmx512m -Xms512m"
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - kafka-data:/var/lib/kafka/data
    ports:
      - "9092:9092"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  analytics-reporting-service:
    image: ashritha07/analytics-reporting-service:${IMAGE_TAG:-latest}
    container_name: analytics-reporting-service
    environment:
      PORT: 3000
      DATABASE_URL: postgres://postgres:root@postgres:5432/analytics-reporting
      NODE_ENV: development
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "3000:3000"
    networks:
      - app-network

  billing-service:
    image: ashritha07/billing-service:${IMAGE_TAG:-latest}
    container_name: billing-service
    environment:
      PORT: 3001
      NODE_ENV: development
      SERVICE_NAME: billing-service
      API_PREFIX: /api/v1/billing

      DATABASE_URL: postgres://postgres:root@postgres:5432/Billing
      DB_HOST: localhost
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: root
      DB_NAME: Billing

      KAFKA_BROKERS: kafka:9092
      KAFKA_GROUP_ID: billing-service-group
      KAFKA_CLIENT_ID: billing-service
      KAFKA_CLIENT_SECRET: billing-service
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "3001:3001"
    networks:
      - app-network

  collection-management-service:
    image: ashritha07/collection-management-service:${IMAGE_TAG:-latest}
    container_name: collection-management-service
    environment:
      PORT: 3002
      DATABASE_URL: postgres://postgres:root@postgres:5432/collection-management
      NODE_ENV: development
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "3002:3002"
    networks:
      - app-network

  consumer-service:
    image: ashritha07/consumer-service:${IMAGE_TAG:-latest}
    container_name: consumer-service
    environment:
      PORT: 3003
      NODE_ENV: development
      SERVICE_NAME: consumer-service
      API_PREFIX: /api/v1/consumer

      DATABASE_URL: postgres://postgres:root@postgres:5432/Consumers
      DB_HOST: localhost
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: root
      DB_NAME: Consumers
      DB_POOL_MAX: 5
      DB_POOL_MIN: 0
      DB_POOL_ACQUIRE: 30000
      DB_POOL_IDLE: 10000

      KAFKA_BROKER: kafka:9092
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "3003:3003"
    networks:
      - app-network

  customer-support-service:
    image: ashritha07/customer-support-service:${IMAGE_TAG:-latest}
    container_name: customer-support-service
    environment:
      PORT: 3004
      DATABASE_URL: postgres://postgres:root@postgres:5432/complaint-grievance-management
      NODE_ENV: development
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "3004:3004"
    networks:
      - app-network

  gis-location-management-service:
    image: ashritha07/gis-location-management-service:${IMAGE_TAG:-latest}
    container_name: gis-location-management-service
    environment:
      PORT: 3005
      DATABASE_URL: postgres://postgres:root@postgres:5432/gis-location-management
      NODE_ENV: development
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "3005:3005"
    networks:
      - app-network

  meter-management-inventory-service:
    image: ashritha07/meter-management-inventory-service:${IMAGE_TAG:-latest}
    container_name: meter-management-inventory-service
    environment:
      PORT: 3006
      DATABASE_URL: postgres://postgres:root@postgres:5432/meter-management-inventory
      NODE_ENV: development
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "3006:3006"
    networks:
      - app-network

  notification-communication-service:
    image: ashritha07/notification-communication-service:${IMAGE_TAG:-latest}
    container_name: notification-communication-service
    environment:
      PORT: 3007
      DATABASE_URL: postgres://postgres:root@postgres:5432/notification-communication
      NODE_ENV: development

      KAFKA_BROKERS: kafka:9092
      KAFKA_GROUP_ID: notification-communication-group
      KAFKA_CLIENT_ID: notification-communication-service
      KAFKA_CLIENT_SECRET: notification-communication-service
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "3007:3007"
    networks:
      - app-network

  policy-management-service:
    image: ashritha07/policy-management-service:${IMAGE_TAG:-latest}
    container_name: policy-management-service
    environment:
      PORT: 3008
      DATABASE_URL: postgres://postgres:root@postgres:5432/Policies
      NODE_ENV: development
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "3008:3008"
    networks:
      - app-network

  third-party-integration-gateway-service:
    image: ashritha07/third-party-integration-gateway-service:${IMAGE_TAG:-latest}
    container_name: third-party-integration-gateway-service
    environment:
      PORT: 3009
      DATABASE_URL: postgres://postgres:root@postgres:5432/third-party-integration-gateway
      NODE_ENV: development
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "3009:3009"
    networks:
      - app-network

  user-identity-access-management-service:
    image: ashritha07/user-identity-access-management-service:${IMAGE_TAG:-latest}

    container_name: user-identity-access-management-service
    environment:
      PORT: 3010
      DATABASE_URL: postgres://postgres:root@postgres:5432/user-identity-access-management
      NODE_ENV: development
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "3010:3010"
    networks:
      - app-network

  user-service:
    image: ashritha07/user-service:${IMAGE_TAG:-latest}
    container_name: user-service
    environment:
      PORT: 3011
      NODE_ENV: development
      SERVICE_NAME: user-service
      API_PREFIX: /api/v1/user

      DATABASE_URL: postgres://postgres:root@postgres:5432/Users
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: root
      DB_NAME: Users

      JWT_SECRET: "1cc06f721e01d4e6f89af72e09681968a85798dd016e8817149f1564dee40018d0ee65a090162a309ae20e8dae1c4cafebcfcd11878cec9e8d022d7f9ed0ead9"
      JWT_EXPIRES_IN: 24h
      OTP_EXPIRES_IN: 5m
      OTP_LENGTH: 6
      TWILIO_ACCOUNT_SID: AC4c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2
      TWILIO_AUTH_TOKEN: your-twilio-auth-token
      TWILIO_PHONE_NUMBER: your-twilio-phone-number

      SMTP_USER: ashritha.amigo@gmail.com
      SMTP_PASSWORD: tztm fiox rtec wtxs
      SMTP_HOST: ashritha.amigo@gmail.com
      SMTP_PORT: 587
      SMTP_IS_SECURE: "true" 

      KAFKA_BROKERS: 'kafka:9092'
      KAFKA_GROUP_ID: 'user-service-group'
      KAFKA_CLIENT_ID: 'user-service'
      INFINITO_CLIENT_ID: 'amigoinfwaz3zf16xa4hxs1c'
      INFINITO_CLIENT_PASSWORD: 'z8ffuy1jjujh8pq8rhcoy7s2159o868o'
      INFINITO_FROM_NUMBER: '919000347979'
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "3011:3011"
    networks:
      - app-network

  workflow-approval-service:
    image: ashritha07/workflow-approval-service:${IMAGE_TAG:-latest}
    container_name: workflow-approval-service
    environment:
      PORT: 3012
      DATABASE_URL: postgres://postgres:root@postgres:5432/workflow-approval
      NODE_ENV: development
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "3012:3012"
    networks:
      - app-network


volumes:
  postgres-data:
  zookeeper-data:
  zookeeper-logs:
  kafka-data:

networks:
  app-network:
    driver: bridge

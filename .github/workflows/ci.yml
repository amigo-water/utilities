# .github/workflows/ci.yml
name: CI - Build and Push Images

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allow manual triggering

env:
  REGISTRY: docker.io
  IMAGE_TAG: main-${{ github.sha }}

jobs:
  changes:
    runs-on: self-hosted
    outputs:
      analytics-reporting-service: ${{ steps.changes.outputs.analytics-reporting-service }}
      billing-service: ${{ steps.changes.outputs.billing-service }}
      collection-management-service: ${{ steps.changes.outputs.collection-management-service }}
      consumer-service: ${{ steps.changes.outputs.consumer-service }}
      customer-support-service: ${{ steps.changes.outputs.customer-support-service }}
      gis-location-management-service: ${{ steps.changes.outputs.gis-location-management-service }}
      meter-management-inventory-service: ${{ steps.changes.outputs.meter-management-inventory-service }}
      notification-communication-service: ${{ steps.changes.outputs.notification-communication-service }}
      policy-management-service: ${{ steps.changes.outputs.policy-management-service }}
      third-party-integration-gateway-service: ${{ steps.changes.outputs.third-party-integration-gateway-service }}
      user-identity-access-management-service: ${{ steps.changes.outputs.user-identity-access-management-service }}
      user-service: ${{ steps.changes.outputs.user-service }}
      workflow-approval-service: ${{ steps.changes.outputs.workflow-approval-service }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Detect changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            analytics-reporting-service:
              - 'services/analytics-reporting-service/**'
            billing-service:
              - 'services/billing-service/**'
            collection-management-service:
              - 'services/collection-management-service/**'
            consumer-service:
              - 'services/consumer-service/**'
            customer-support-service:
              - 'services/customer-support-service/**'
            gis-location-management-service:
              - 'services/gis-location-management-service/**'
            meter-management-inventory-service:
              - 'services/meter-management-inventory-service/**'
            notification-communication-service:
              - 'services/notification-communication-service/**'
            policy-management-service:
              - 'services/policy-management-service/**'
            third-party-integration-gateway-service:
              - 'services/third-party-integration-gateway-service/**'
            user-identity-access-management-service:
              - 'services/user-identity-access-management-service/**'
            user-service:
              - 'services/user-service/**'
            workflow-approval-service:
              - 'services/workflow-approval-service/**'

  build-and-push:
    needs: changes
    runs-on: self-hosted
    strategy:
      fail-fast: false
      matrix:
        service: [
          analytics-reporting-service,
          billing-service,
          collection-management-service,
          consumer-service,
          customer-support-service,
          gis-location-management-service,
          meter-management-inventory-service,
          notification-communication-service,
          policy-management-service,
          third-party-integration-gateway-service,
          user-identity-access-management-service,
          user-service,
          workflow-approval-service
        ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check if service changed
        id: check-changes
        run: |
          SERVICE_OUTPUT="${{ matrix.service }}"
          SERVICE_CHANGED=$(echo '${{ toJson(needs.changes.outputs) }}' | jq -r --arg service "$SERVICE_OUTPUT" '.[$service]')
          
          # Validate the result
          if [[ "$SERVICE_CHANGED" == "null" ]] || [[ -z "$SERVICE_CHANGED" ]]; then
            echo "⚠️ Warning: Could not determine change status for $SERVICE_OUTPUT"
            SERVICE_CHANGED="false"
          fi
          
          if [[ "$SERVICE_CHANGED" == "true" ]] || [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "🔄 Building ${{ matrix.service }} (changed: $SERVICE_CHANGED)"
          else
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "⏭️ Skipping ${{ matrix.service }} (no changes)"
          fi

      - name: Set up Docker Buildx
        if: steps.check-changes.outputs.changed == 'true'
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        if: steps.check-changes.outputs.changed == 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Verify Docker login
        if: steps.check-changes.outputs.changed == 'true'
        run: docker info

      - name: Build and push Docker image with simple tagging
        if: steps.check-changes.outputs.changed == 'true'
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./services/${{ matrix.service }}/Dockerfile
          push: true
          tags: |
            docker.io/ashritha07/${{ matrix.service }}:${{ env.IMAGE_TAG }}
            docker.io/ashritha07/${{ matrix.service }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Build Summary
        if: steps.check-changes.outputs.changed == 'true'
        run: |
          echo "## 🐳 Built ${{ matrix.service }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Image:** docker.io/ashritha07/${{ matrix.service }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tags:** ${{ env.IMAGE_TAG }}, latest" >> $GITHUB_STEP_SUMMARY
          echo "- **Digest:** ${{ steps.build.outputs.digest }}" >> $GITHUB_STEP_SUMMARY

      - name: Debug information
        run: |
          echo "Service: ${{ matrix.service }}"
          echo "IMAGE_TAG: ${{ env.IMAGE_TAG }}"
          echo "All outputs: ${{ toJson(needs.changes.outputs) }}"
          SERVICE_CHANGED=$(echo '${{ toJson(needs.changes.outputs) }}' | jq -r --arg service "${{ matrix.service }}" '.[$service]')
          echo "Service changed: $SERVICE_CHANGED"

  notify-success:
    needs: [build-and-push]
    runs-on: self-hosted
    if: success()
    steps:
      - name: Notify success
        run: |
          echo "✅ CI Pipeline completed successfully"
          echo "🚀 Images built and pushed with tag: ${{ env.IMAGE_TAG }}"
          echo "## 🎉 CI Pipeline Success" >> $GITHUB_STEP_SUMMARY
          echo "Successfully completed build and push for changed services" >> $GITHUB_STEP_SUMMARY
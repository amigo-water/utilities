# .github/workflows/cd.yml
name: CD - Deploy to Environment

on:
  workflow_run:
    workflows: ["CI - Build and Push Images"]
    types:
      - completed
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: self-hosted
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get SHA and set IMAGE_TAG
        id: get_sha
        run: |
          if [[ "${{ github.event_name }}" == "workflow_run" ]]; then
            # Use SHA from the triggering workflow
            ACTUAL_SHA="${{ github.event.workflow_run.head_sha }}"
          else
            # Use current SHA for manual dispatch
            ACTUAL_SHA="${{ github.sha }}"
          fi
          
          # Get short SHA (8 characters) - same as CI
          SHORT_SHA=$(echo ${ACTUAL_SHA} | cut -c1-8)
          
          echo "=== SHA DEBUG ==="
          echo "Event name: ${{ github.event_name }}"
          echo "Full SHA: ${ACTUAL_SHA}"
          echo "Short SHA: ${SHORT_SHA}"
          echo "================"
          
          # Set as output and environment variable
          echo "IMAGE_TAG=${SHORT_SHA}" >> $GITHUB_OUTPUT
          echo "IMAGE_TAG=${SHORT_SHA}" >> $GITHUB_ENV

      - name: Deploy services
        run: |
          cd infra
          echo "🚀 Deploying with SHA tag: ${{ steps.get_sha.outputs.IMAGE_TAG }}"
          
          # Try to pull images with the specific SHA tag
          # If a service wasn't built (no changes), it will fall back to 'latest'
          docker-compose pull || echo "⚠️ Some images may not exist with this SHA, will use fallback tags"
          
          # Deploy
          docker-compose down
          docker-compose up -d
          
          echo "✅ Deployment completed"

      - name: Verify deployment
        run: |
          cd infra
          echo "🔍 Verifying deployment..."
          docker-compose ps
          
          # Clean up old images
          docker image prune -f

      - name: Deployment summary
        run: |
          echo "## 🎉 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **SHA Tag:** ${{ steps.get_sha.outputs.IMAGE_TAG }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status:** ✅ Successful" >> $GITHUB_STEP_SUMMARY
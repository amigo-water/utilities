name: CD - Deploy to Environment

on:
  workflow_run:
    workflows: ["CI - Build and Push Images"]
    types:
      - completed
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: self-hosted
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get SHA and set IMAGE_TAG
        id: get_sha
        run: |
          if [[ "${{ github.event_name }}" == "workflow_run" ]]; then
            ACTUAL_SHA="${{ github.event.workflow_run.head_sha }}"
          else
            ACTUAL_SHA="${{ github.sha }}"
          fi
          
          SHORT_SHA=$(echo ${ACTUAL_SHA} | cut -c1-8)
          echo "IMAGE_TAG=${SHORT_SHA}" >> $GITHUB_OUTPUT
          echo "IMAGE_TAG=${SHORT_SHA}" >> $GITHUB_ENV

      - name: Check available images and create dynamic compose
        id: check-images
        run: |
          SHORT_SHA="${{ steps.get_sha.outputs.IMAGE_TAG }}"
          
          # List of all your services
          services=(
            "user-identity-access-management-service"
            "policy-management-service" 
            "user-service"
            "consumer-service"
            "customer-support-service"
            "third-party-integration-gateway-service"
            "meter-management-inventory-service"
            "billing-service"
            "gis-location-management-service"
            "notification-communication-service"
            "collection-management-service"
            "analytics-reporting-service"
            "workflow-approval-service"
          )
          
          # Create a temporary compose override file
          cat > infra/docker-compose.override.yml << 'EOF'
          version: '3.8'
          services:
          EOF
          
          # Check each service and set appropriate tag
          for service in "${services[@]}"; do
            echo "Checking service: $service"
            if docker manifest inspect ashritha07/${service}:${SHORT_SHA} > /dev/null 2>&1; then
              echo "✓ Found SHA tag for $service"
              cat >> infra/docker-compose.override.yml << EOF
            ${service}:
              image: ashritha07/${service}:${SHORT_SHA}
          EOF
            elif docker manifest inspect ashritha07/${service}:latest > /dev/null 2>&1; then
              echo "✓ Using latest tag for $service"
              cat >> infra/docker-compose.override.yml << EOF
            ${service}:
              image: ashritha07/${service}:latest
          EOF
            else
              echo "⚠️ No image found for $service, skipping..."
            fi
          done
          
          echo "Generated docker-compose.override.yml:"
          cat infra/docker-compose.override.yml

      - name: Deploy
        run: |
          cd infra
          
          # Pull only available images (ignore failures)
          echo "Pulling available images..."
          docker-compose pull --ignore-pull-failures || true
          
          # Stop existing containers
          docker-compose down
          
          # Start services
          echo "Starting services..."
          docker-compose up -d
          
          # Wait and check status
          sleep 10
          docker-compose ps
          
          # Show logs for any failed services
          echo "Checking for failed services..."
          
          # Check if any services have exited
          if docker-compose ps | grep -q "Exit"; then
            echo "❌ Some services have exited!"
            echo "Failed services:"
            docker-compose ps | grep "Exit"
            
            # Show logs for services that aren't running
            echo "=== Logs for failed services ==="
            docker-compose logs --tail=20
            exit 1
          else
            echo "✅ All services are running successfully!"
          fi
          
      - name: Cleanup
        if: always()
        run: |
          # Clean up the override file
          rm -f infra/docker-compose.override.yml
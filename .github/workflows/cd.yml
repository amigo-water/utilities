name: CD - Deploy to Environment

on:
  workflow_run:
    workflows: ["CI - Build and Push Images"]
    types:
      - completed
    branches: [main]
  workflow_dispatch:

jobs:
  detect-changes:
    runs-on: self-hosted
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    outputs:
      short_sha: ${{ steps.set-sha.outputs.short_sha }}
      matrix: ${{ steps.build-matrix.outputs.matrix }}
      infra_changed: ${{ steps.changes.outputs.infra }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get SHA for tracking
        id: set-sha
        run: |
          if [[ "${{ github.event_name }}" == "workflow_run" ]]; then
            echo "short_sha=$(echo '${{ github.event.workflow_run.head_sha }}' | cut -c1-8)" >> $GITHUB_OUTPUT
          else
            echo "short_sha=$(echo '${{ github.sha }}' | cut -c1-8)" >> $GITHUB_OUTPUT
          fi

      - name: Detect changed services and infra
        id: changes
        uses: dorny/paths-filter@v2
        with:
          filters: |
            analytics-reporting-service: services/analytics-reporting-service/**
            billing-service: services/billing-service/**
            collection-management-service: services/collection-management-service/**
            consumer-service: services/consumer-service/**
            customer-support-service: services/customer-support-service/**
            gis-location-management-service: services/gis-location-management-service/**
            meter-management-inventory-service: services/meter-management-inventory-service/**
            notification-communication-service: services/notification-communication-service/**
            policy-management-service: services/policy-management-service/**
            third-party-integration-gateway-service: services/third-party-integration-gateway-service/**
            user-identity-access-management-service: services/user-identity-access-management-service/**
            user-service: services/user-service/**
            workflow-approval-service: services/workflow-approval-service/**
            infra: infra/**

      - name: Check which services have new images
        id: build-matrix
        run: |
          SERVICES=(analytics-reporting-service billing-service collection-management-service consumer-service customer-support-service gis-location-management-service meter-management-inventory-service notification-communication-service policy-management-service third-party-integration-gateway-service user-identity-access-management-service user-service workflow-approval-service)
          
          matrix=$(jq -n '{include: []}')
          SHORT_SHA="${{ steps.set-sha.outputs.short_sha }}"
          
          echo "üîç Checking which services have images with SHA: $SHORT_SHA"
          
          for svc in "${SERVICES[@]}"; do
            IMAGE_NAME="ashritha07/$svc:$SHORT_SHA"
            
            # Check if image exists in registry
            if docker manifest inspect $IMAGE_NAME >/dev/null 2>&1; then
              echo "‚úÖ Found image for $svc with SHA $SHORT_SHA"
              matrix=$(echo "$matrix" | jq --arg svc "$svc" '.include += [{"service": $svc}]')
            else
              echo "‚è≠Ô∏è No image found for $svc with SHA $SHORT_SHA"
            fi
          done
          
          echo "matrix=$(echo $matrix | jq -c)" >> $GITHUB_OUTPUT
          echo "Final matrix: $(echo $matrix | jq -c)"

  deploy-services:
    needs: detect-changes
    if: ${{ fromJson(needs.detect-changes.outputs.matrix).include != '' }}
    runs-on: self-hosted
    strategy:
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy service
        run: |
          SERVICE=${{ matrix.service }}
          SHORT_SHA=${{ needs.detect-changes.outputs.short_sha }}
          IMAGE_NAME=ashritha07/$SERVICE:$SHORT_SHA
          
          echo "üîÑ Deploying $SERVICE with SHA: $SHORT_SHA"
          cd infra
          export IMAGE_TAG=$SHORT_SHA
          
          docker-compose stop $SERVICE || true
          docker-compose rm -f $SERVICE || true
          docker-compose up -d $SERVICE
          
          echo "‚úÖ $SERVICE deployed with SHA: $SHORT_SHA"
          

  deploy-infrastructure:
    needs: detect-changes
    runs-on: self-hosted
    if: ${{ needs.detect-changes.outputs.infra_changed == 'true' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy Infrastructure
        run: |
          set -e  # Exit on error
          echo "üîÑ Infrastructure changed, managing components..."
          cd infra
          export IMAGE_TAG=${{ needs.detect-changes.outputs.short_sha }}
          
          # Function to check if container exists
          container_exists() {
            docker ps -a --filter "name=^$1$" --format '{{.Names}}' | grep -q "^$1$"
          }
          
          # Function to check if container is running
          container_running() {
            docker ps --filter "name=^$1$" --format '{{.Names}}' | grep -q "^$1$"
          }
          
          # Start Nginx first if it doesn't exist or isn't running
          if ! container_running "nginx"; then
            echo "üöÄ Starting Nginx for the first time..."
            if ! container_exists "nginx"; then
              docker-compose up -d nginx
            else
              docker-compose start nginx || docker-compose up -d nginx
            fi
            echo "‚úÖ Nginx started successfully"
          else
            echo "‚ÑπÔ∏è Nginx is already running"
          fi
          
          # Stop and remove other infrastructure services if they exist
          for service in kafka zookeeper postgres; do
            echo "üîÑ Processing $service..."
            if container_running "$service"; then
              echo "üõë Stopping $service..."
              docker-compose stop "$service" || true
              echo "üóëÔ∏è  Removing $service..."
              docker-compose rm -f "$service" || true
            fi
          done
          
          # Start core infrastructure services
          echo "üöÄ Starting core infrastructure services..."
          docker-compose up -d zookeeper
          
          # Wait for Zookeeper to be ready
          echo "‚è≥ Waiting for Zookeeper to be ready..."
          until docker-compose exec -T zookeeper zkServer.sh status > /dev/null 2>&1; do
            sleep 5
            echo "‚è≥ Waiting for Zookeeper..."
          done
          
          # Start Kafka
          echo "üöÄ Starting Kafka..."
          docker-compose up -d kafka
          
          # Start Postgres
          echo "üöÄ Starting Postgres..."
          docker-compose up -d postgres
          
          # Wait for Postgres to be ready
          echo "‚è≥ Waiting for Postgres to be ready..."
          until docker-compose exec -T postgres pg_isready -U postgres > /dev/null 2>&1; do
            sleep 5
            echo "‚è≥ Waiting for Postgres..."
          done
          
          # Restart Nginx to ensure it picks up any configuration changes
          echo "üîÑ Restarting Nginx to apply any configuration changes..."
          docker-compose restart nginx
          
          # Verify all services are up
          echo "‚úÖ Verifying services are running..."
          for service in zookeeper kafka postgres nginx; do
            if container_running "$service"; then
              echo "‚úÖ $service is running"
            else
              echo "‚ùå $service failed to start"
              docker-compose logs "$service" --tail=20
              exit 1
            fi
          done
          
          echo "‚úÖ Infrastructure deployment completed successfully!"